{"version":3,"sources":["components/Header.jsx","components/Note.jsx","components/CreateArea.jsx","components/App.jsx","index.js"],"names":["Header","Note","props","className","title","content","Fab","onClick","onDelete","id","CreateArea","useState","isExpanded","setIsExpanded","note","setNote","handleChange","event","target","name","value","previousValue","onChange","placeholder","autoComplete","rows","Zoom","in","onAdd","preventDefault","App","notes","setNotes","deleteNote","previousNote","filter","noteItem","index","newNote","map","ReactDOM","render","document","getElementById"],"mappings":"2LAWeA,MARf,WACE,OACE,iCACE,+BAAI,cAAC,IAAD,IAAJ,iB,yBCcSC,MAjBf,SAAcC,GAQZ,OACE,sBAAKC,UAAU,OAAf,UACE,6BAAKD,EAAME,QACX,4BAAIF,EAAMG,UACV,cAACC,EAAA,EAAD,CAAKC,QART,WACEL,EAAMM,SAASN,EAAMO,KAOnB,SAA2B,cAAC,IAAD,U,yCCqDlBC,MA/Df,SAAoBR,GAClB,MAAoCS,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwBF,mBAAS,CAC/BP,MAAO,GACPC,QAAS,KAFX,mBAAOS,EAAP,KAAaC,EAAb,KAKA,SAASC,EAAaC,GAEpB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEdL,GAAQ,SAACM,GACP,OAAO,2BACFA,GADL,kBAEGF,EAAOC,OAmBd,OACE,8BACE,uBAAMjB,UAAU,cAAhB,UACGS,EACC,uBACEU,SAAUN,EACVG,KAAK,QACLI,YAAY,QACZH,MAAON,EAAKV,MACZoB,aAAa,QAEb,KACJ,0BACEjB,QAjBR,WACEM,GAAc,IAiBRS,SAAUN,EACVG,KAAK,UACLI,YAAY,iBACZE,KAAMb,EAAa,EAAI,EACvBQ,MAAON,EAAKT,UAEd,cAACqB,EAAA,EAAD,CAAMC,GAAIf,EAAV,SACE,cAACN,EAAA,EAAD,CAAKC,QAnCb,SAAoBU,GAClBf,EAAM0B,MAAMd,GACZC,EAAQ,CACNX,MAAO,GACPC,QAAS,KAGXY,EAAMY,kBA4BA,SACE,cAAC,IAAD,cCNGC,MA/Cf,WACE,MAA0BnB,mBAAS,IAAnC,mBAAOoB,EAAP,KAAcC,EAAd,KASA,SAASC,EAAWxB,GAClBuB,GAAS,SAACE,GACR,OAAOA,EAAaC,QAAO,SAACC,EAAUC,GACpC,OAAOA,IAAU5B,QAKvB,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAYmB,MAlBhB,SAAiBU,GACfN,GAAS,SAACE,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAyBI,UA2BxBP,EAAMQ,KAAI,SAACH,EAAUC,GACpB,OACE,cAAC,EAAD,CAEE5B,GAAI4B,EACJjC,MAAOgC,EAAShC,MAChBC,QAAS+B,EAAS/B,QAClBG,SAAUyB,GAJLI,UCvCjBG,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d6c94add.chunk.js","sourcesContent":["import React from \"react\";\r\nimport HighlightIcon from '@material-ui/icons/Highlight';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h1><HighlightIcon />  Keeper</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Fab } from \"@material-ui/core\";\r\nfunction Note(props) {\r\n  // create a function that is going to trigger a function\r\n  // that gets passed over from the props that will delete\r\n  // this note from the array\r\n  function handleClick() {\r\n    props.onDelete(props.id)\r\n  }\r\n\r\n  return (\r\n    <div className=\"note\">\r\n      <h1>{props.title}</h1>\r\n      <p>{props.content}</p>\r\n      <Fab onClick={handleClick}><DeleteIcon /></Fab>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Note;\r\n","import React, { useState } from \"react\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\n\r\nfunction CreateArea(props) {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [note, setNote] = useState({\r\n    title: \"\",\r\n    content: \"\",\r\n  });\r\n\r\n  function handleChange(event) {\r\n    // destructuring the event to get hold of event (value & name)\r\n    const { name, value } = event.target;\r\n\r\n    setNote((previousValue) => {\r\n      return {\r\n        ...previousValue,\r\n        [name]: value,\r\n      };\r\n    });\r\n  }\r\n\r\n  function submitNote(event) {\r\n    props.onAdd(note);\r\n    setNote({\r\n      title: \"\",\r\n      content: \"\",\r\n    });\r\n\r\n    event.preventDefault();\r\n  }\r\n\r\n  function expand() {\r\n    setIsExpanded(true);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"create-note\">\r\n        {isExpanded ? (\r\n          <input\r\n            onChange={handleChange}\r\n            name=\"title\"\r\n            placeholder=\"Title\"\r\n            value={note.title}\r\n            autoComplete=\"off\"\r\n          />\r\n        ) : null}\r\n        <textarea\r\n          onClick={expand}\r\n          onChange={handleChange}\r\n          name=\"content\"\r\n          placeholder=\"Take a note...\"\r\n          rows={isExpanded ? 3 : 1}\r\n          value={note.content}\r\n        />\r\n        <Zoom in={isExpanded}>\r\n          <Fab onClick={submitNote}>\r\n            <AddIcon />\r\n          </Fab>\r\n        </Zoom>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateArea;\r\n","import React, { useState } from \"react\";\r\nimport Header from \"./Header\";\r\n// import Footer from \"./Footer\";\r\nimport Note from \"./Note\";\r\n// import existingNotes from \"../existingNotes\";\r\nimport CreateArea from \"./CreateArea\";\r\n\r\nfunction App() {\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  function addNote(newNote) {\r\n    setNotes((previousNote) => {\r\n      return [...previousNote, newNote];\r\n    });\r\n  }\r\n\r\n  // this function needs the id of the note that needs to be deleted\r\n  function deleteNote(id) {\r\n    setNotes((previousNote) => {\r\n      return previousNote.filter((noteItem, index) => {\r\n        return index !== id;\r\n      });\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <CreateArea onAdd={addNote} />\r\n      {/* {existingNotes.map((note) => {\r\n        return (\r\n          <Note\r\n            key={note.key}\r\n            title={note.title}\r\n            content={note.content}\r\n            onDelete={deleteNote}\r\n          />\r\n        );\r\n      })} */}\r\n      {notes.map((noteItem, index) => {\r\n        return (\r\n          <Note\r\n            key={index}\r\n            id={index}\r\n            title={noteItem.title}\r\n            content={noteItem.content}\r\n            onDelete={deleteNote}\r\n          />\r\n        );\r\n      })}\r\n      {/* <Footer /> */}\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}